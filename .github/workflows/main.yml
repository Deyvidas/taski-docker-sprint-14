name: Main taski workflow

on:
  push:
    paths-ignore:
      - "README.md"

jobs:


  # ----------------------------------------------------------- backend testing
  backend_tests:
    runs-on: ubuntu-latest
    name: Create and run psql container, check PEP8 and run tests

    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Set up Python3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      -
        name: Update pip and install dependency
        run: |
          pip install -U pip setuptools -r backend/requirements.txt
          pip install flake8==6.0.0 flake8-isort==6.0.0
      -
        name: Check PEP8 and run django tests
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
          SEPARATOR: ","
          DEBUG: False
          SECRET_KEY: django-insecure-j_89af+30&&4qm*8p4-ho8z_mlm0s$h!-p@on1_^
          ALLOWED_HOSTS: "localhost,127.0.0.1"
          CORS_ORIGIN_WHITELIST: http://localhost:3000
        run: |
          cd backend/
          flake8 .
          python manage.py test


  # ---------------------------------------------------------- frontend testing
  frontend_tests:
    runs-on: ubuntu-latest
    name: Install node and this dependencies, then run tests of spa components

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Set up nodeJS version 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      -
        name: Install dependencies
        run: |
          cd frontend/
          npm ci
      -
        name: Test spa components
        run: |
          cd frontend/
          npm run test


  # -------------------------------------------------------- backend build&push
  backend_build_and_push_to_dockerhub:
    if: github.ref == 'refs/heads/main'
    needs: backend_tests
    runs-on: ubuntu-latest
    name: Login to dockerhub, create docker backend image and push this

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Deploy Docker on workflow server
        uses: docker/setup-buildx-action@v2
      -
        name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DHL }}
          password: ${{ secrets.DHP }}
      -
        name: Build, then push created images on dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DHL }}/taski_backend:latest


  # ------------------------------------------------------- frontend build&push
  frontend_build_and_push_to_dockerhub:
    if: github.ref == 'refs/heads/main'
    needs: frontend_tests
    runs-on: ubuntu-latest
    name: Login to dockerhub, create docker frontend image and push this

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Deploy Docker on workflow server
        uses: docker/setup-buildx-action@v2
      -
        name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DHL }}
          password: ${{ secrets.DHP }}
      -
        name: Build, then push created images on dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DHL }}/taski_frontend:latest


  # -------------------------------------------------------- gateway build&push
  gateway_build_and_push_to_dockerhub:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Login to dockerhub, create docker gateway image and push this

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Deploy Docker on workflow server
        uses: docker/setup-buildx-action@v2
      -
        name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DHL }}
          password: ${{ secrets.DHP }}
      -
        name: Build, then push created images on dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DHL }}/taski_gateway:latest


  # ------------------------------------ rebot with new images server container
  deploy_to_live_server:
    if: github.ref == 'refs/heads/main'
    needs:
     - backend_build_and_push_to_dockerhub
     - frontend_build_and_push_to_dockerhub
     - gateway_build_and_push_to_dockerhub
    runs-on: ubuntu-latest
    name: Copy docker-compose.production.yml and reload all containers with actual version of images
    env:
      docker_compose_file: "docker-compose.production.yml"
      root_app_dir: "taski"

    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Copy docker-compose.production.yml to live server via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ${{ env.docker_compose_file }}
          target: ${{ env.root_app_dir }}
      -
        name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ env.root_app_dir }}
            sudo docker compose -f ${{ env.docker_compose_file }} pull
            sudo docker compose -f ${{ env.docker_compose_file }} down
            sudo docker compose -f ${{ env.docker_compose_file }} up --detach


  # ----------------------------------------------------- telegram notification
  send_message_to_telegram:
    needs: deploy_to_live_server
    runs-on: ubuntu-latest
    name: Send message about successed deploy of docker-compose to remote live server

    steps:
      -
        name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Deploy of project taski is successfully completed!